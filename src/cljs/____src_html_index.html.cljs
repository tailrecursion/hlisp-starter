(ns holyshit (:require-macros [mytest.macros :as m]))
(def a              (hlisp.env/make-elem-node "a"))
(def abbr           (hlisp.env/make-elem-node "abbr"))
(def acronym        (hlisp.env/make-elem-node "acronym"))
(def address        (hlisp.env/make-elem-node "address"))
(def applet         (hlisp.env/make-elem-node "applet"))
(def area           (hlisp.env/make-elem-node "area"))
(def article        (hlisp.env/make-elem-node "article"))
(def aside          (hlisp.env/make-elem-node "aside"))
(def audio          (hlisp.env/make-elem-node "audio"))
(def b              (hlisp.env/make-elem-node "b"))
(def base           (hlisp.env/make-elem-node "base"))
(def basefont       (hlisp.env/make-elem-node "basefont"))
(def bdi            (hlisp.env/make-elem-node "bdi"))
(def bdo            (hlisp.env/make-elem-node "bdo"))
(def big            (hlisp.env/make-elem-node "big"))
(def blockquote     (hlisp.env/make-elem-node "blockquote"))
(def body           (hlisp.env/make-elem-node "body"))
(def br             (hlisp.env/make-elem-node "br"))
(def button         (hlisp.env/make-elem-node "button"))
(def canvas         (hlisp.env/make-elem-node "canvas"))
(def caption        (hlisp.env/make-elem-node "caption"))
(def center         (hlisp.env/make-elem-node "center"))
(def cite           (hlisp.env/make-elem-node "cite"))
(def code           (hlisp.env/make-elem-node "code"))
(def col            (hlisp.env/make-elem-node "col"))
(def colgroup       (hlisp.env/make-elem-node "colgroup"))
(def command        (hlisp.env/make-elem-node "command"))
(def data           (hlisp.env/make-elem-node "data"))
(def datalist       (hlisp.env/make-elem-node "datalist"))
(def dd             (hlisp.env/make-elem-node "dd"))
(def del            (hlisp.env/make-elem-node "del"))
(def details        (hlisp.env/make-elem-node "details"))
(def dfn            (hlisp.env/make-elem-node "dfn"))
(def dir            (hlisp.env/make-elem-node "dir"))
(def div            (hlisp.env/make-elem-node "div"))
(def dl             (hlisp.env/make-elem-node "dl"))
(def dt             (hlisp.env/make-elem-node "dt"))
(def em             (hlisp.env/make-elem-node "em"))
(def embed          (hlisp.env/make-elem-node "embed"))
(def eventsource    (hlisp.env/make-elem-node "eventsource"))
(def fieldset       (hlisp.env/make-elem-node "fieldset"))
(def figcaption     (hlisp.env/make-elem-node "figcaption"))
(def figure         (hlisp.env/make-elem-node "figure"))
(def font           (hlisp.env/make-elem-node "font"))
(def footer         (hlisp.env/make-elem-node "footer"))
(def form           (hlisp.env/make-elem-node "form"))
(def frame          (hlisp.env/make-elem-node "frame"))
(def frameset       (hlisp.env/make-elem-node "frameset"))
(def h1             (hlisp.env/make-elem-node "h1"))
(def h2             (hlisp.env/make-elem-node "h2"))
(def h3             (hlisp.env/make-elem-node "h3"))
(def h4             (hlisp.env/make-elem-node "h4"))
(def h5             (hlisp.env/make-elem-node "h5"))
(def h6             (hlisp.env/make-elem-node "h6"))
(def head           (hlisp.env/make-elem-node "head"))
(def header         (hlisp.env/make-elem-node "header"))
(def hgroup         (hlisp.env/make-elem-node "hgroup"))
(def hr             (hlisp.env/make-elem-node "hr"))
(def html           (hlisp.env/make-elem-node "html"))
(def i              (hlisp.env/make-elem-node "i"))
(def iframe         (hlisp.env/make-elem-node "iframe"))
(def img            (hlisp.env/make-elem-node "img"))
(def input          (hlisp.env/make-elem-node "input"))
(def ins            (hlisp.env/make-elem-node "ins"))
(def isindex        (hlisp.env/make-elem-node "isindex"))
(def kbd            (hlisp.env/make-elem-node "kbd"))
(def keygen         (hlisp.env/make-elem-node "keygen"))
(def label          (hlisp.env/make-elem-node "label"))
(def legend         (hlisp.env/make-elem-node "legend"))
(def li             (hlisp.env/make-elem-node "li"))
(def link           (hlisp.env/make-elem-node "link"))
(def html-map       (hlisp.env/make-elem-node "map"))
(def mark           (hlisp.env/make-elem-node "mark"))
(def menu           (hlisp.env/make-elem-node "menu"))
(def html-meta      (hlisp.env/make-elem-node "meta"))
(def meter          (hlisp.env/make-elem-node "meter"))
(def nav            (hlisp.env/make-elem-node "nav"))
(def noframes       (hlisp.env/make-elem-node "noframes"))
(def noscript       (hlisp.env/make-elem-node "noscript"))
(def object         (hlisp.env/make-elem-node "object"))
(def ol             (hlisp.env/make-elem-node "ol"))
(def optgroup       (hlisp.env/make-elem-node "optgroup"))
(def option         (hlisp.env/make-elem-node "option"))
(def output         (hlisp.env/make-elem-node "output"))
(def p              (hlisp.env/make-elem-node "p"))
(def param          (hlisp.env/make-elem-node "param"))
(def pre            (hlisp.env/make-elem-node "pre"))
(def progress       (hlisp.env/make-elem-node "progress"))
(def q              (hlisp.env/make-elem-node "q"))
(def rp             (hlisp.env/make-elem-node "rp"))
(def rt             (hlisp.env/make-elem-node "rt"))
(def ruby           (hlisp.env/make-elem-node "ruby"))
(def s              (hlisp.env/make-elem-node "s"))
(def samp           (hlisp.env/make-elem-node "samp"))
(def script         (hlisp.env/make-elem-node "script"))
(def section        (hlisp.env/make-elem-node "section"))
(def select         (hlisp.env/make-elem-node "select"))
(def small          (hlisp.env/make-elem-node "small"))
(def source         (hlisp.env/make-elem-node "source"))
(def span           (hlisp.env/make-elem-node "span"))
(def strike         (hlisp.env/make-elem-node "strike"))
(def strong         (hlisp.env/make-elem-node "strong"))
(def style          (hlisp.env/make-elem-node "style"))
(def sub            (hlisp.env/make-elem-node "sub"))
(def summary        (hlisp.env/make-elem-node "summary"))
(def sup            (hlisp.env/make-elem-node "sup"))
(def table          (hlisp.env/make-elem-node "table"))
(def tbody          (hlisp.env/make-elem-node "tbody"))
(def td             (hlisp.env/make-elem-node "td"))
(def textarea       (hlisp.env/make-elem-node "textarea"))
(def tfoot          (hlisp.env/make-elem-node "tfoot"))
(def th             (hlisp.env/make-elem-node "th"))
(def thead          (hlisp.env/make-elem-node "thead"))
(def html-time      (hlisp.env/make-elem-node "time"))
(def title          (hlisp.env/make-elem-node "title"))
(def tr             (hlisp.env/make-elem-node "tr"))
(def track          (hlisp.env/make-elem-node "track"))
(def tt             (hlisp.env/make-elem-node "tt"))
(def u              (hlisp.env/make-elem-node "u"))
(def ul             (hlisp.env/make-elem-node "ul"))
(def html-var       (hlisp.env/make-elem-node "var"))
(def video          (hlisp.env/make-elem-node "video"))
(def wbr            (hlisp.env/make-elem-node "wbr"))
(def $list          (hlisp.env/make-elem-node "$list"))
(def $text          hlisp.env/make-text-node)
(def $comment       hlisp.env/make-comment-node)
(m/def-values [question-tab answer-tab question answer show-question show-answer] [li li div div (a {:href "#"}) (a {:href "#"})])
(defn ^:export hlispinit []
(hlisp.env/init [(ul {:class "control-tabs"} (question-tab {} ($text "question")) (answer-tab {} ($text "answer"))) (div {} (question {} (p {} (b {} ($text "Q.")) ($text " Why did the chicken cross the road? ") (show-answer {} ($text "A")))) (answer {} (p {} (b {} ($text "A.")) ($text " To get to the other side! ") (show-question {} ($text "Q")))))]))